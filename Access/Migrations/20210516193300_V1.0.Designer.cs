// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebLicense.Access;

namespace WebLicense.Access.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210516193300_V1.0")]
    partial class V10
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ConcurrencyStamp = "68d27851-632c-4ede-a90a-df36f218513c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 100L,
                            ConcurrencyStamp = "5f9ddbe6-66c8-43c6-9e45-3af9bdb632a4",
                            Name = "Customer Admin",
                            NormalizedName = "CUSTOMER ADMIN"
                        },
                        new
                        {
                            Id = 200L,
                            ConcurrencyStamp = "c625ff79-efab-49f8-855e-a396d527937c",
                            Name = "Customer Manager",
                            NormalizedName = "CUSTOMER MANAGER"
                        },
                        new
                        {
                            Id = 300L,
                            ConcurrencyStamp = "67918a99-3265-4297-aef9-b4232e2e57b4",
                            Name = "Customer User",
                            NormalizedName = "CUSTOMER USER"
                        });
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "https://weblicense/account/password/change",
                            ClaimValue = "true",
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "https://weblicense/account/2fa/disable",
                            ClaimValue = "true",
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "https://weblicense/account/2fa/enable",
                            ClaimValue = "true",
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "https://weblicense/account/login/external",
                            ClaimValue = "true",
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "https://weblicense/account/password/reset",
                            ClaimValue = "true",
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "https://weblicense/administration/account/password/change",
                            ClaimValue = "true",
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "https://weblicense/administration/account/2fa/disable",
                            ClaimValue = "true",
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "https://weblicense/administration/account/2fa/enable",
                            ClaimValue = "true",
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "https://weblicense/administration/account/password/reset",
                            ClaimValue = "true",
                            RoleId = 1L
                        },
                        new
                        {
                            Id = 100,
                            ClaimType = "https://weblicense/account/password/change",
                            ClaimValue = "true",
                            RoleId = 100L
                        },
                        new
                        {
                            Id = 101,
                            ClaimType = "https://weblicense/account/2fa/disable",
                            ClaimValue = "true",
                            RoleId = 100L
                        },
                        new
                        {
                            Id = 102,
                            ClaimType = "https://weblicense/account/2fa/enable",
                            ClaimValue = "true",
                            RoleId = 100L
                        },
                        new
                        {
                            Id = 103,
                            ClaimType = "https://weblicense/account/login/external",
                            ClaimValue = "true",
                            RoleId = 100L
                        },
                        new
                        {
                            Id = 104,
                            ClaimType = "https://weblicense/account/password/reset",
                            ClaimValue = "true",
                            RoleId = 100L
                        },
                        new
                        {
                            Id = 200,
                            ClaimType = "https://weblicense/account/password/change",
                            ClaimValue = "true",
                            RoleId = 200L
                        },
                        new
                        {
                            Id = 201,
                            ClaimType = "https://weblicense/account/2fa/disable",
                            ClaimValue = "true",
                            RoleId = 200L
                        },
                        new
                        {
                            Id = 202,
                            ClaimType = "https://weblicense/account/2fa/enable",
                            ClaimValue = "true",
                            RoleId = 200L
                        },
                        new
                        {
                            Id = 203,
                            ClaimType = "https://weblicense/account/login/external",
                            ClaimValue = "true",
                            RoleId = 200L
                        },
                        new
                        {
                            Id = 204,
                            ClaimType = "https://weblicense/account/password/reset",
                            ClaimValue = "true",
                            RoleId = 200L
                        },
                        new
                        {
                            Id = 300,
                            ClaimType = "https://weblicense/account/password/change",
                            ClaimValue = "true",
                            RoleId = 300L
                        },
                        new
                        {
                            Id = 301,
                            ClaimType = "https://weblicense/account/2fa/disable",
                            ClaimValue = "true",
                            RoleId = 300L
                        },
                        new
                        {
                            Id = 302,
                            ClaimType = "https://weblicense/account/2fa/enable",
                            ClaimValue = "true",
                            RoleId = 300L
                        },
                        new
                        {
                            Id = 303,
                            ClaimType = "https://weblicense/account/login/external",
                            ClaimValue = "true",
                            RoleId = 300L
                        },
                        new
                        {
                            Id = 304,
                            ClaimType = "https://weblicense/account/password/reset",
                            ClaimValue = "true",
                            RoleId = 300L
                        });
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("EulaAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("GdprAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c42f7bae-3e0e-4f13-9aa3-4f28f5849887",
                            Email = "admin-one@weblicense.com",
                            EmailConfirmed = true,
                            EulaAccepted = true,
                            GdprAccepted = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN-ONE@WEBLICENSE.COM",
                            NormalizedUserName = "ADMINISTRATOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEAFoNUw0jsS/ev3FkMANTCK+ufkFJZokg4NRVLbRWQswVUJ49ecSmwiOF77XYVTQlg==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "04B0F1FE428C42888CDC392DC7200804F3B4F3EC274C46DABE005BB080E627D1782CAF53E8384023A6FF10F0D3FC0A63",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        });
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            RoleId = 1L
                        });
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.UserToken", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.RoleClaim", b =>
                {
                    b.HasOne("WebLicense.Core.Models.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.UserClaim", b =>
                {
                    b.HasOne("WebLicense.Core.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.UserLogin", b =>
                {
                    b.HasOne("WebLicense.Core.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.UserRole", b =>
                {
                    b.HasOne("WebLicense.Core.Models.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebLicense.Core.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.UserToken", b =>
                {
                    b.HasOne("WebLicense.Core.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
