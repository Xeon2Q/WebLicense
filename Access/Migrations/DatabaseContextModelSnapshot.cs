// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebLicense.Access;

namespace WebLicense.Access.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CS_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Customers.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Secure ID of the Customer.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The Name of the Customer");

                    b.Property<string>("ReferenceId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("Reference ID is using to register new users for the Customer.");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ReferenceId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Customers.CustomerAdministrator", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("CustomerId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerAdministrator");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Customers.CustomerManager", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("CustomerId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerManager");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Customers.CustomerSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanActivateLicenses")
                        .HasColumnType("bit");

                    b.Property<bool>("CanActivateMachine")
                        .HasColumnType("bit");

                    b.Property<bool>("CanDeactivateLicenses")
                        .HasColumnType("bit");

                    b.Property<bool>("CanDeactivateMachine")
                        .HasColumnType("bit");

                    b.Property<bool>("CanDeleteLicenses")
                        .HasColumnType("bit");

                    b.Property<bool>("CanDeleteMachine")
                        .HasColumnType("bit");

                    b.Property<bool>("CreateActiveLicenses")
                        .HasColumnType("bit");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("MaxActiveLicensesCount")
                        .HasColumnType("int");

                    b.Property<int>("MaxTotalLicensesCount")
                        .HasColumnType("int");

                    b.Property<string>("NotificationsEmail")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Email address used for notifications.");

                    b.Property<bool>("ReceiveNotifications")
                        .HasColumnType("bit")
                        .HasComment("Must be TRUE if Customer wants to receive notifications about his licenses.");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("CustomerSettings");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Customers.CustomerUpdate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Changes")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerUpdates");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 9223372036854775807L,
                            ConcurrencyStamp = "790cd832-ff49-4a0b-8c91-72f1d10e0479",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 9223372036854775806L,
                            ConcurrencyStamp = "80d34efa-dbbf-42a5-bbeb-1c7423309e83",
                            Name = "Customer Admin",
                            NormalizedName = "CUSTOMER ADMIN"
                        },
                        new
                        {
                            Id = 9223372036854775805L,
                            ConcurrencyStamp = "26be03aa-9bbd-4396-96cf-ae57b86e087b",
                            Name = "Customer Manager",
                            NormalizedName = "CUSTOMER MANAGER"
                        },
                        new
                        {
                            Id = 9223372036854775804L,
                            ConcurrencyStamp = "e07c0289-5e00-4118-9083-f2e5d221ea8f",
                            Name = "Customer User",
                            NormalizedName = "CUSTOMER USER"
                        });
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");

                    b.HasData(
                        new
                        {
                            Id = 2147483647,
                            ClaimType = "https://weblicense/account/password/change",
                            ClaimValue = "true",
                            RoleId = 9223372036854775807L
                        },
                        new
                        {
                            Id = 2147483646,
                            ClaimType = "https://weblicense/account/2fa/disable",
                            ClaimValue = "true",
                            RoleId = 9223372036854775807L
                        },
                        new
                        {
                            Id = 2147483645,
                            ClaimType = "https://weblicense/account/2fa/enable",
                            ClaimValue = "true",
                            RoleId = 9223372036854775807L
                        },
                        new
                        {
                            Id = 2147483644,
                            ClaimType = "https://weblicense/account/login/external",
                            ClaimValue = "true",
                            RoleId = 9223372036854775807L
                        },
                        new
                        {
                            Id = 2147483643,
                            ClaimType = "https://weblicense/account/password/reset",
                            ClaimValue = "true",
                            RoleId = 9223372036854775807L
                        },
                        new
                        {
                            Id = 2147483642,
                            ClaimType = "https://weblicense/administration/account/password/change",
                            ClaimValue = "true",
                            RoleId = 9223372036854775807L
                        },
                        new
                        {
                            Id = 2147483641,
                            ClaimType = "https://weblicense/administration/account/2fa/disable",
                            ClaimValue = "true",
                            RoleId = 9223372036854775807L
                        },
                        new
                        {
                            Id = 2147483640,
                            ClaimType = "https://weblicense/administration/account/2fa/enable",
                            ClaimValue = "true",
                            RoleId = 9223372036854775807L
                        },
                        new
                        {
                            Id = 2147483639,
                            ClaimType = "https://weblicense/administration/account/password/reset",
                            ClaimValue = "true",
                            RoleId = 9223372036854775807L
                        },
                        new
                        {
                            Id = 2147483547,
                            ClaimType = "https://weblicense/account/password/change",
                            ClaimValue = "true",
                            RoleId = 9223372036854775806L
                        },
                        new
                        {
                            Id = 2147483546,
                            ClaimType = "https://weblicense/account/2fa/disable",
                            ClaimValue = "true",
                            RoleId = 9223372036854775806L
                        },
                        new
                        {
                            Id = 2147483545,
                            ClaimType = "https://weblicense/account/2fa/enable",
                            ClaimValue = "true",
                            RoleId = 9223372036854775806L
                        },
                        new
                        {
                            Id = 2147483544,
                            ClaimType = "https://weblicense/account/login/external",
                            ClaimValue = "true",
                            RoleId = 9223372036854775806L
                        },
                        new
                        {
                            Id = 2147483543,
                            ClaimType = "https://weblicense/account/password/reset",
                            ClaimValue = "true",
                            RoleId = 9223372036854775806L
                        },
                        new
                        {
                            Id = 2147483447,
                            ClaimType = "https://weblicense/account/password/change",
                            ClaimValue = "true",
                            RoleId = 9223372036854775805L
                        },
                        new
                        {
                            Id = 2147483446,
                            ClaimType = "https://weblicense/account/2fa/disable",
                            ClaimValue = "true",
                            RoleId = 9223372036854775805L
                        },
                        new
                        {
                            Id = 2147483445,
                            ClaimType = "https://weblicense/account/2fa/enable",
                            ClaimValue = "true",
                            RoleId = 9223372036854775805L
                        },
                        new
                        {
                            Id = 2147483444,
                            ClaimType = "https://weblicense/account/login/external",
                            ClaimValue = "true",
                            RoleId = 9223372036854775805L
                        },
                        new
                        {
                            Id = 2147483443,
                            ClaimType = "https://weblicense/account/password/reset",
                            ClaimValue = "true",
                            RoleId = 9223372036854775805L
                        },
                        new
                        {
                            Id = 2147483347,
                            ClaimType = "https://weblicense/account/password/change",
                            ClaimValue = "true",
                            RoleId = 9223372036854775804L
                        },
                        new
                        {
                            Id = 2147483346,
                            ClaimType = "https://weblicense/account/2fa/disable",
                            ClaimValue = "true",
                            RoleId = 9223372036854775804L
                        },
                        new
                        {
                            Id = 2147483345,
                            ClaimType = "https://weblicense/account/2fa/enable",
                            ClaimValue = "true",
                            RoleId = 9223372036854775804L
                        },
                        new
                        {
                            Id = 2147483344,
                            ClaimType = "https://weblicense/account/login/external",
                            ClaimValue = "true",
                            RoleId = 9223372036854775804L
                        },
                        new
                        {
                            Id = 2147483343,
                            ClaimType = "https://weblicense/account/password/reset",
                            ClaimValue = "true",
                            RoleId = 9223372036854775804L
                        });
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("EulaAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("GdprAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 9223372036854775807L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d7768320-8828-46f0-b93c-da5d4e8df382",
                            Email = "admin-one@weblicense.com",
                            EmailConfirmed = true,
                            EulaAccepted = true,
                            GdprAccepted = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN-ONE@WEBLICENSE.COM",
                            NormalizedUserName = "ADMINISTRATOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEDkUo0hPVHN0Lz+wuFd+kfJruhNeFVDx/9MXUtrbucc3Z/7P4lGxFAw9FiBFKEInMQ==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "E994B312DC56440FBD6058358A9B93EAECFBDCCD9C4443A196C42B81B59D5BE5F9A8CD5EE9F94A7A9EE7CECA77CD4B71",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        });
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 9223372036854775807L,
                            RoleId = 9223372036854775807L
                        });
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.UserToken", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Customers.CustomerAdministrator", b =>
                {
                    b.HasOne("WebLicense.Core.Models.Customers.Customer", "Customer")
                        .WithMany("CustomerAdministrators")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebLicense.Core.Models.Identity.User", "User")
                        .WithMany("CustomerAdministrators")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Customers.CustomerManager", b =>
                {
                    b.HasOne("WebLicense.Core.Models.Customers.Customer", "Customer")
                        .WithMany("CustomerManagers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebLicense.Core.Models.Identity.User", "User")
                        .WithMany("CustomerManagers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Customers.CustomerSettings", b =>
                {
                    b.HasOne("WebLicense.Core.Models.Customers.Customer", null)
                        .WithOne("Settings")
                        .HasForeignKey("WebLicense.Core.Models.Customers.CustomerSettings", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebLicense.Core.Models.Customers.CustomerUpdate", b =>
                {
                    b.HasOne("WebLicense.Core.Models.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.RoleClaim", b =>
                {
                    b.HasOne("WebLicense.Core.Models.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.User", b =>
                {
                    b.HasOne("WebLicense.Core.Models.Customers.Customer", "Customer")
                        .WithMany("Users")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.UserClaim", b =>
                {
                    b.HasOne("WebLicense.Core.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.UserLogin", b =>
                {
                    b.HasOne("WebLicense.Core.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.UserRole", b =>
                {
                    b.HasOne("WebLicense.Core.Models.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebLicense.Core.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.UserToken", b =>
                {
                    b.HasOne("WebLicense.Core.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebLicense.Core.Models.Customers.Customer", b =>
                {
                    b.Navigation("CustomerAdministrators");

                    b.Navigation("CustomerManagers");

                    b.Navigation("Settings");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.User", b =>
                {
                    b.Navigation("CustomerAdministrators");

                    b.Navigation("CustomerManagers");
                });
#pragma warning restore 612, 618
        }
    }
}
