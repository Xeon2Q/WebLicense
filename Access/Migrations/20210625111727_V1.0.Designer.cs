// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebLicense.Access;

namespace WebLicense.Access.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210625111727_V1.0")]
    partial class V10
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CS_AS")
                .HasAnnotation("ProductVersion", "5.0.6");

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Customers.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT")
                        .HasComment("Secure ID of the Customer.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasComment("The Name of the Customer");

                    b.Property<string>("ReferenceId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasComment("Reference ID is using to register new users for the Customer.");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ReferenceId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Customers.CustomerAdministrator", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CustomerId", "UserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerAdministrator");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Customers.CustomerManager", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CustomerId", "UserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerManager");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Customers.CustomerSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanActivateLicenses")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanActivateMachines")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanDeactivateLicenses")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanDeactivateMachines")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanDeleteLicenses")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanDeleteMachines")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CreateActiveLicenses")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxActiveLicensesCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxTotalLicensesCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NotificationsEmail")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasComment("Email address used for notifications.");

                    b.Property<bool>("ReceiveNotifications")
                        .HasColumnType("INTEGER")
                        .HasComment("Must be TRUE if Customer wants to receive notifications about his licenses.");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.HasIndex("ReceiveNotifications");

                    b.ToTable("CustomerSettings");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Customers.CustomerUpdate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Changes")
                        .HasMaxLength(2147483647)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Created");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerUpdates");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Customers.CustomerUser", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CustomerId", "UserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerUser");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 9223372036854775807L,
                            ConcurrencyStamp = "72ad42cc-f490-419d-a30f-e082881edfa4",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 9223372036854775806L,
                            ConcurrencyStamp = "ad600d30-c53b-43e4-94f1-6c10dadb5a56",
                            Name = "Customer Admin",
                            NormalizedName = "CUSTOMER ADMIN"
                        },
                        new
                        {
                            Id = 9223372036854775805L,
                            ConcurrencyStamp = "c090cc4c-4b47-4294-838e-4790a2a7cb98",
                            Name = "Customer Manager",
                            NormalizedName = "CUSTOMER MANAGER"
                        },
                        new
                        {
                            Id = 9223372036854775804L,
                            ConcurrencyStamp = "11abc07c-b2c8-4b27-8313-3659830b976d",
                            Name = "Customer User",
                            NormalizedName = "CUSTOMER USER"
                        });
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<long>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");

                    b.HasData(
                        new
                        {
                            Id = 2147483647,
                            ClaimType = "https://weblicense/account/password/change",
                            ClaimValue = "true",
                            RoleId = 9223372036854775807L
                        },
                        new
                        {
                            Id = 2147483646,
                            ClaimType = "https://weblicense/account/2fa/disable",
                            ClaimValue = "true",
                            RoleId = 9223372036854775807L
                        },
                        new
                        {
                            Id = 2147483645,
                            ClaimType = "https://weblicense/account/2fa/enable",
                            ClaimValue = "true",
                            RoleId = 9223372036854775807L
                        },
                        new
                        {
                            Id = 2147483644,
                            ClaimType = "https://weblicense/account/login/external",
                            ClaimValue = "true",
                            RoleId = 9223372036854775807L
                        },
                        new
                        {
                            Id = 2147483643,
                            ClaimType = "https://weblicense/account/password/reset",
                            ClaimValue = "true",
                            RoleId = 9223372036854775807L
                        },
                        new
                        {
                            Id = 2147483642,
                            ClaimType = "https://weblicense/administration/account/password/change",
                            ClaimValue = "true",
                            RoleId = 9223372036854775807L
                        },
                        new
                        {
                            Id = 2147483641,
                            ClaimType = "https://weblicense/administration/account/2fa/disable",
                            ClaimValue = "true",
                            RoleId = 9223372036854775807L
                        },
                        new
                        {
                            Id = 2147483640,
                            ClaimType = "https://weblicense/administration/account/2fa/enable",
                            ClaimValue = "true",
                            RoleId = 9223372036854775807L
                        },
                        new
                        {
                            Id = 2147483639,
                            ClaimType = "https://weblicense/administration/account/password/reset",
                            ClaimValue = "true",
                            RoleId = 9223372036854775807L
                        },
                        new
                        {
                            Id = 2147483547,
                            ClaimType = "https://weblicense/account/password/change",
                            ClaimValue = "true",
                            RoleId = 9223372036854775806L
                        },
                        new
                        {
                            Id = 2147483546,
                            ClaimType = "https://weblicense/account/2fa/disable",
                            ClaimValue = "true",
                            RoleId = 9223372036854775806L
                        },
                        new
                        {
                            Id = 2147483545,
                            ClaimType = "https://weblicense/account/2fa/enable",
                            ClaimValue = "true",
                            RoleId = 9223372036854775806L
                        },
                        new
                        {
                            Id = 2147483544,
                            ClaimType = "https://weblicense/account/login/external",
                            ClaimValue = "true",
                            RoleId = 9223372036854775806L
                        },
                        new
                        {
                            Id = 2147483543,
                            ClaimType = "https://weblicense/account/password/reset",
                            ClaimValue = "true",
                            RoleId = 9223372036854775806L
                        },
                        new
                        {
                            Id = 2147483447,
                            ClaimType = "https://weblicense/account/password/change",
                            ClaimValue = "true",
                            RoleId = 9223372036854775805L
                        },
                        new
                        {
                            Id = 2147483446,
                            ClaimType = "https://weblicense/account/2fa/disable",
                            ClaimValue = "true",
                            RoleId = 9223372036854775805L
                        },
                        new
                        {
                            Id = 2147483445,
                            ClaimType = "https://weblicense/account/2fa/enable",
                            ClaimValue = "true",
                            RoleId = 9223372036854775805L
                        },
                        new
                        {
                            Id = 2147483444,
                            ClaimType = "https://weblicense/account/login/external",
                            ClaimValue = "true",
                            RoleId = 9223372036854775805L
                        },
                        new
                        {
                            Id = 2147483443,
                            ClaimType = "https://weblicense/account/password/reset",
                            ClaimValue = "true",
                            RoleId = 9223372036854775805L
                        },
                        new
                        {
                            Id = 2147483347,
                            ClaimType = "https://weblicense/account/password/change",
                            ClaimValue = "true",
                            RoleId = 9223372036854775804L
                        },
                        new
                        {
                            Id = 2147483346,
                            ClaimType = "https://weblicense/account/2fa/disable",
                            ClaimValue = "true",
                            RoleId = 9223372036854775804L
                        },
                        new
                        {
                            Id = 2147483345,
                            ClaimType = "https://weblicense/account/2fa/enable",
                            ClaimValue = "true",
                            RoleId = 9223372036854775804L
                        },
                        new
                        {
                            Id = 2147483344,
                            ClaimType = "https://weblicense/account/login/external",
                            ClaimValue = "true",
                            RoleId = 9223372036854775804L
                        },
                        new
                        {
                            Id = 2147483343,
                            ClaimType = "https://weblicense/account/password/reset",
                            ClaimValue = "true",
                            RoleId = 9223372036854775804L
                        });
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EulaAccepted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("GdprAccepted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 9223372036854775807L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d4c7b7c-097d-4c9b-b41c-f848451d4881",
                            Email = "admin-one@weblicense.com",
                            EmailConfirmed = true,
                            EulaAccepted = true,
                            GdprAccepted = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN-ONE@WEBLICENSE.COM",
                            NormalizedUserName = "ADMINISTRATOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEKAw3BH8c/s6bVp875JBirfp7MqLm9e3HGCM0UAiQHQ+Llz4g2eibnd1CkdVcBkYng==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "828D1EE61C5E4257996C4A14EFE539DD54F2FF5C917B45439E5BB8920F145810141DEE8FEE0D438FA769D6E9F2AC84D7",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        });
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 9223372036854775807L,
                            RoleId = 9223372036854775807L
                        });
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.UserToken", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Customers.CustomerAdministrator", b =>
                {
                    b.HasOne("WebLicense.Core.Models.Customers.Customer", "Customer")
                        .WithMany("CustomerAdministrators")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebLicense.Core.Models.Identity.User", "User")
                        .WithMany("CustomerAdministrators")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Customers.CustomerManager", b =>
                {
                    b.HasOne("WebLicense.Core.Models.Customers.Customer", "Customer")
                        .WithMany("CustomerManagers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebLicense.Core.Models.Identity.User", "User")
                        .WithMany("CustomerManagers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Customers.CustomerSettings", b =>
                {
                    b.HasOne("WebLicense.Core.Models.Customers.Customer", "Customer")
                        .WithOne("Settings")
                        .HasForeignKey("WebLicense.Core.Models.Customers.CustomerSettings", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Customers.CustomerUpdate", b =>
                {
                    b.HasOne("WebLicense.Core.Models.Customers.Customer", "Customer")
                        .WithMany("Updates")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebLicense.Core.Models.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Customers.CustomerUser", b =>
                {
                    b.HasOne("WebLicense.Core.Models.Customers.Customer", "Customer")
                        .WithMany("CustomerUsers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebLicense.Core.Models.Identity.User", "User")
                        .WithMany("CustomerUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.RoleClaim", b =>
                {
                    b.HasOne("WebLicense.Core.Models.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.UserClaim", b =>
                {
                    b.HasOne("WebLicense.Core.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.UserLogin", b =>
                {
                    b.HasOne("WebLicense.Core.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.UserRole", b =>
                {
                    b.HasOne("WebLicense.Core.Models.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebLicense.Core.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.UserToken", b =>
                {
                    b.HasOne("WebLicense.Core.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebLicense.Core.Models.Customers.Customer", b =>
                {
                    b.Navigation("CustomerAdministrators");

                    b.Navigation("CustomerManagers");

                    b.Navigation("CustomerUsers");

                    b.Navigation("Settings");

                    b.Navigation("Updates");
                });

            modelBuilder.Entity("WebLicense.Core.Models.Identity.User", b =>
                {
                    b.Navigation("CustomerAdministrators");

                    b.Navigation("CustomerManagers");

                    b.Navigation("CustomerUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
